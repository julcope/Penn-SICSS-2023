library(lubridate)
library(pdftools)
library(jsonlite)
library(leaflet)
setwd("g:/My Drive/docs/Greg/Penn/CRIM602/data/PhillyOIS")
setwd("nanfeng/Desktop/GitHub/Penn-SICSS-2023")
getwd()
setwd("/User/nanfeng/Desktop/GitHub/Penn-SICSS-2023")
setwd("/Users/nanfeng/Desktop/GitHub/Penn-SICSS-2023")
dataText <- c("3718 Locust Walk",
"4 Privet Drive",
"10880 Malibu Point",
"221B Baker St.",
"19104-6286",
"20015",
"90291",
"90210",
"(215) 573-9097",
"215-573-9097",
"2155739097",
"Kendall Roy",
"Roman Roy",
"Siobhan Roy",
"Roy Wood Jr.",
"Royal Caribbean",
"Casino Royal",
"two children",
"2 children",
"twins",
"Philadelphia",
"Philly",
"Phila",
"Dr. Phil",
"$23456",
"$10000")
grep("a", dataText)
grepl("a", dataText)
# give TRUE/FALSE if it finds "a"
grepl("a", dataText)
# show the values that have "a"
grep("a", dataText, value=TRUE)
# find the letter "a"
# give the indices that have "a"
grep("a", dataText)
# show the values that have "a"
grep("a", dataText, value=TRUE)
# find the number "1"
grep("1", dataText, value=TRUE)
# find numbers
#   square brackets contain lists of characters
grep("[0123456789]", dataText, value=TRUE)
grep("[0-9]", dataText, value=TRUE) #this is the shortcut for the previous line
# find four numbers together
grep("[0-9][0-9][0-9][0-9]", dataText, value=TRUE)
# find odd numbers
grep("[13579]", dataText, value=TRUE)
# find four numbers together
grep("[0-9][0-9][0-9][0-9]", dataText, value=TRUE)
grep("[0-9]{4}", dataText, value=TRUE)
# find capital letters
grep("[A-Z]", dataText, value=TRUE)
# find capital letters
grep("[A-Z]", dataText, value=TRUE)
# find items with at least two "words" (words=stuff with letters)
#    capital A to lowercase z
grep("[A-z] [A-z]", dataText, value=TRUE)
# find items with at least two "words" (words=stuff with letters)
#    capital A to lowercase z
grep("[A-z] [A-z]", dataText, value=TRUE)
# find ZIP codes that start with 90
grep("90[0-9]{3}", dataText, value=TRUE)
dataText
# find ZIP codes that start with 90
grep("90[0-9]{3}", dataText, value=TRUE)
grep("[A E I O U a e i o u]",dataText, value=TRUE)
grep([0-9]{1}[A-z]{1},dataText, value=TRUE)
grep([0-9][A-z]{2},dataText, value=TRUE)
grep("[0-9]{1}[A-z]{1}",dataText, value=TRUE)
grep("[0-9]{1}[A-z]{1}",dataText, value=TRUE)
grep("Roy", dataText, value=TRUE)
grep("[Roy]", dataText, value=TRUE)
grep("[0-9][A-z]",dataText, value=TRUE)
dataText
grep("[Roy]", dataText, value=TRUE)
grep("^[A-z]", dataText, value=TRUE)
grep("[A-z]$", dataText, value=TRUE)
grep("[^A-z ][A-z]", dataText, value=TRUE)
grep("[0-9]+-[0-9]+", dataText, value=TRUE)
#############################################################################
# Exercises
#############################################################################
#4. Find the Roy children
grep("[A-z] Roy", dataText, value=TRUE)
#############################################################################
# Exercises
#############################################################################
#4. Find the Roy children
grep("[A-z]" "Roy", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep()
#5 Text that starts with a number ends with a letter
grep("^[0-9][A-z]$", dataText, value=TRUE)
dataText
#5 Text that starts with a number ends with a letter
grep("^[0-9][ ,-][A-z]$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][ ,-]+[A-z]$", dataText, value=TRUE)
# phone numbers
grep("[0-9]{3}-[0-9]{3}-[0-9]{4}", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][ ,-]+[A-z]$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][ ,- 0-9]+[A-z]$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][,- ]+[A-z]$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][ ,-]+[A-z]$", dataText, value=TRUE)
#############################################################################
# Exercises
#############################################################################
#4. Find the Roy children
grep("[A-z] Roy$", dataText, value=TRUE)
#############################################################################
# Exercises
#############################################################################
#4. Find the Roy children
grep("Roy$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][ ,-]+[A-z]$", dataText, value=TRUE)
#############################################################################
# Exercises
#############################################################################
#4. Find the Roy children
grep("Roy$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9][0-9A-2 .-]+[A-z]$", dataText, value=TRUE)
grep("^[0-9][0-9A-2 .-]+[A-z]$", dataText, value=TRUE)
#5 Text that starts with a number ends with a letter
grep("^[0-9].+[A-z]$", dataText, value=TRUE)
grep("^[0-9].*+[A-z]$", dataText, value=TRUE)
grep("^[0-9].*[A-z]$", dataText, value=TRUE)
grep("[0-9]{3}-[0-9]{3}-[0-9]{4}", dataText, value=TRUE)
# phone numbers
grep("[0-9]{3}-[0-9]{3}-[0-9]{4}", dataText, value=TRUE)
grep("\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}", dataText, value=TRUE)
grep("[0-9]{10}", dataText, value=TRUE)
# use | as "or" to put them together
grep("[0-9]{3}-[0-9]{3}-[0-9]{4}|\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}|[0-9]{10}",
dataText, value=TRUE)
# () group together characters as words
# get those with three suspects
# long way
grep("two children|2 children", dataText, value=TRUE)
# compact way
grep("(two|2) children", dataText, value=TRUE)
# get DC and LA ZIP codes
grep("(902|200)[0-9]{2}", dataText, value=TRUE)
# The ? indicates optional text
grep("Phil(adelphia)",  dataText, value=TRUE)
grep("Phil(adelphia)?", dataText, value=TRUE)
# find four letter words
#   \b looks for boundaries (not letters or numbers)
grep("\\b[A-z]{4}\\b", dataText, value=TRUE)
# alternatively
grep("( |^)[A-z]{4}( |$)", dataText, value=TRUE)
#############################################################################
# Exercises
#############################################################################
#6 Find text that only has letters (no numbers, spaces, punctuation)
grep("^[A-z]+[A-z$]", dataText, value=TRUE)
dataText
#7 Find ZIP codes
grep("(902|200|191)[0-9]+", dataText, value=TRUE)
#8 Find variations on Philadelphia
grep("( )Phil(adelphia)?", dataText, value=TRUE)
grep("^[0-9]{5}(-[0-9]{4}|$)", dataText, value=TRUE)
#8 Find variations on Philadelphia
grep("Phil(adelphia|ly|a)?", dataText, value=TRUE)
#10 Find a shorter way to get phone numbers using ?
grep("\\(?[0-9]{3}(\\ | -)?[0-9]{3}-[0-9]{4}", dataText, value=TRUE)
#10 Find a shorter way to get phone numbers using ?
grep("\\(?[0-9]{3}(\\) |-)?[0-9]{3}-[0-9]{4}", dataText, value=TRUE)
# remove the Roy's last names
gsub(" Roy$", "", dataText) ## replace " Roy$" with ""
# remove anything that is not a number from text
gsub("[^0-9]","", dataText)
# remove anything that is not a number from text
gsub("[^0-9]","", dataText)
gsub("[.)($-]","X", dataText)
#   Use parentheses to save parts, saved as \\1, \\2, etc.
gsub("([0-9]{5})-[0-9]{4}", "\\1", dataText)
# standardize phone numbers
gsub("^\\(?([0-9]{3})(\\) |-)?([0-9]{3})-?([0-9]{4})",
"\\1-\\3-\\4", dataText)
#############################################################################
# Exercises
#############################################################################
#11 Change Dr. Phil to Dr. Phillip
gsub("Dr. Phil", "Dr. Phillip", dataText)
# problems with comma separated files
text.w.quotes <- "white,male,\"loitering,narcotics\",arrest,\"knife,gun\",19"
gsub("Phil(adelphia|ly|a)?", "Philadelphia", dataText)
gsub("\$[0-9]+","\$[0-9]?+[0-9]{3}", dataText)
gsub("*$[0-9]+","*$[0-9]?+[0-9]{3}", dataText)
gsub("*$[0-9]+","*$[0-9]?,[0-9]{3}", dataText)
gsub("*$[0-9]+","*$[0-9]?\,[0-9]{3}", dataText)
gsub("Phil(ly|a)$?", "Philadelphia", dataText)
gsub("*$[0-9]+\,*$[0-9]?[0-9]{3}", dataText)
gsub("*$[0-9]+,*$[0-9]?[0-9]{3}", dataText)
gsub("*$[0-9]?,*$[0-9]?[0-9]{3}", dataText)
gsub("(\\$[0-9]{2})", "\\1,", dataText)
text.w.quotes <- "white,male,\"loitering,narcotics\",arrest,\"knife,gun\",19"
cat(text.w.quotes,"\n")
library(wordle)
install.packages("remotes")
remotes::install_github("coolbutuseless/wordle")
install.packages("remotes")
remotes::install_github("coolbutuseless/wordle")
install.packages("remotes")
remotes::install_github("coolbutuseless/wordle")
install.packages("remotes")
remotes::install_github("coolbutuseless/wordle")
library(wordle)
wordle_solns
install.packages("remotes")
library(wordle)
wordle_solns
play_wordle(words = wordle_solns)
